{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tea",
				"team"
			],
			[
				"cer",
				"certificateOfElimination"
			],
			[
				"pri",
				"println"
			],
			[
				"ne",
				"network"
			],
			[
				"print",
				"println"
			],
			[
				"dia",
				"diagonalIndex"
			],
			[
				"di",
				"diagonalRow"
			],
			[
				"dig",
				"diagonalIndex"
			],
			[
				"get",
				"getDiagonalIndex"
			],
			[
				"St",
				"String"
			],
			[
				"te",
				"team2"
			],
			[
				"pr",
				"println"
			],
			[
				"ma",
				"margin"
			],
			[
				"col",
				"colNum"
			],
			[
				"clu",
				"colNum"
			],
			[
				"matc",
				"matchesNum"
			],
			[
				"fa",
				"false\t(FordFulkerson.java)"
			],
			[
				"max",
				"maxFlow"
			],
			[
				"Fo",
				"FordFulkerson"
			],
			[
				"For",
				"FordFulkerson\t(TestFordFulkerson.java)"
			],
			[
				"mat",
				"matches"
			],
			[
				"V",
				"V-1\t(FlowNetwork.java)"
			],
			[
				"Flo",
				"FlowEdge"
			],
			[
				"com",
				"computeMaxFlow"
			],
			[
				"team",
				"teamName"
			],
			[
				"in",
				"int"
			],
			[
				"prin",
				"println"
			],
			[
				"In",
				"In"
			],
			[
				"is",
				"isEmpty\t(MaxClosure.java)"
			],
			[
				"pu",
				"put"
			],
			[
				"el",
				"eliminated"
			],
			[
				"ST",
				"String"
			],
			[
				"Flow",
				"FlowEdge\t(FordFulkerson.java)"
			],
			[
				"read",
				"readInt"
			],
			[
				"whi",
				"while\t(BipartiteMatching.java)"
			],
			[
				"Gra",
				"Graph"
			],
			[
				"Fl",
				"FlowEdge"
			],
			[
				"add",
				"addResidualFlowTo\t(FordFulkerson.java)"
			],
			[
				"res",
				"residualCapacityTo"
			],
			[
				"M",
				"Math\t(FordFulkerson.java)"
			],
			[
				"bo",
				"bottle"
			],
			[
				"has",
				"hasAugmentingPath"
			],
			[
				"exc",
				"excess\t(FordFulkerson.java)"
			],
			[
				"Po",
				"POSITIVE_INFINITY\t(DijkstraSP.java)"
			],
			[
				"cont",
				"continue\t(DijkstraSP.java)"
			],
			[
				"con",
				"conditions\t(DijkstraSP.java)"
			],
			[
				"Se",
				"SET"
			],
			[
				"Ed",
				"Edge"
			],
			[
				"Max",
				"MaxClosure"
			],
			[
				"thro",
				"throw\t(BipartiteMatching.java)"
			],
			[
				"incr",
				"increaseKey\t(IndexMinPQ.java)"
			],
			[
				"min",
				"minVertex"
			],
			[
				"cl",
				"cl\tclass"
			],
			[
				"FLo",
				"FlowNetwork"
			],
			[
				"se",
				"setST"
			],
			[
				"close",
				"Closure"
			],
			[
				"o",
				"other"
			],
			[
				"math",
				"matches\t(BipartiteMatching.java)"
			],
			[
				"bre",
				"break\t(BipartiteMatching.java)"
			],
			[
				"co",
				"color"
			],
			[
				"colo",
				"color\t(BipartiteX.java)"
			],
			[
				"IN",
				"Integer"
			],
			[
				"edge",
				"edgeTo"
			],
			[
				"Bip",
				"BipartiteX\t(BipartiteX.java)"
			],
			[
				"dis",
				"dist"
			],
			[
				"no",
				"noFattestPath"
			],
			[
				"Fa",
				"FattestPath"
			],
			[
				"c",
				"cl\tclass"
			],
			[
				"he",
				"height"
			],
			[
				"ene",
				"energies"
			],
			[
				"fin",
				"findVerticalSeam"
			],
			[
				"en",
				"energiesT"
			],
			[
				"minEnerg",
				"minEnergies"
			],
			[
				"new",
				"newEnergies"
			],
			[
				"pic",
				"picture"
			],
			[
				"hig",
				"height"
			],
			[
				"sea",
				"seam"
			],
			[
				"Sd",
				"StdOut\t(MonotonicSP.java)"
			],
			[
				"std",
				"StdOut"
			],
			[
				"row",
				"rowi"
			],
			[
				"w",
				"width"
			],
			[
				"ge",
				"getBlue"
			],
			[
				"po",
				"pow"
			],
			[
				"thr",
				"throw\t(DijkstraSP.java)"
			],
			[
				"shor",
				"shortestDistTo"
			],
			[
				"for",
				"forbid"
			],
			[
				"foun",
				"foundSecondPath"
			],
			[
				"pat",
				"pathTo\t(BellmanFordSP.java)"
			],
			[
				"pa",
				"pathToGoalCnt"
			],
			[
				"Sec",
				"SecondShortestPath"
			],
			[
				"Dijk",
				"DijkstraSP\t(DijkstraSP.java)"
			],
			[
				"edg",
				"edgeTo"
			],
			[
				"Di",
				"DirectedEdge"
			],
			[
				"path",
				"pathTo"
			],
			[
				"we",
				"weight"
			],
			[
				"rela",
				"relax\t(BellmanFordSP.java)"
			],
			[
				"ed",
				"edgeTo"
			],
			[
				"dist",
				"distTo"
			],
			[
				"Mon",
				"MonotonicSP"
			],
			[
				"d",
				"double"
			],
			[
				"Mini",
				"MinimumWeightedFeedback"
			],
			[
				"Min",
				"MinimumWeightedFeedback"
			],
			[
				"fo",
				"found"
			],
			[
				"minW",
				"minWeightCrossingCut"
			],
			[
				"le",
				"length\t(IndexMinPQ.java)"
			],
			[
				"ins",
				"insert"
			],
			[
				"ad",
				"adj\t(PrimMST.java)"
			],
			[
				"del",
				"delMin\t(KruskalMST.java)"
			],
			[
				"wei",
				"weightTo"
			],
			[
				"B",
				"bottleneckCapacity"
			],
			[
				"bot",
				"bottleneckCapacity"
			],
			[
				"decr",
				"decreaseKey\t(IndexMinPQ.java)"
			],
			[
				"othe",
				"other\t(KruskalMST.java)"
			],
			[
				"Inde",
				"IndexMinPQ"
			],
			[
				"th",
				"this"
			],
			[
				"Std",
				"StdOut"
			],
			[
				"e",
				"either\t(KruskalMST.java)"
			],
			[
				"Eg",
				"Edge"
			],
			[
				"Ege",
				"EdgeWeightedGraph\t(EdgeWeightedGraph.java)"
			],
			[
				"Krus",
				"KruskalMST\t(KruskalMST.java)"
			],
			[
				"Prim",
				"PrimMST\t(KruskalMST.java)"
			],
			[
				"roo",
				"rootCnt"
			],
			[
				"anc",
				"ancestralPath"
			],
			[
				"sap",
				"sapW"
			],
			[
				"sa",
				"sapV"
			],
			[
				"b",
				"boolean"
			],
			[
				"Node",
				"NodeStack"
			],
			[
				"valida",
				"validateSAP"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FordFulkerson.java",
			"settings":
			{
				"buffer_size": 10647,
				"line_ending": "Unix"
			}
		},
		{
			"file": "teams4a.txt",
			"settings":
			{
				"buffer_size": 98,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 98.0,
		"last_filter": "select col",
		"selected_items":
		[
			[
				"select col",
				"UI: Select Color Scheme"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"",
				"Colorsublime: Install Theme"
			],
			[
				"colo",
				"Colorsublime: Install Theme"
			],
			[
				"menu",
				"View: Toggle Menu"
			],
			[
				"men",
				"View: Toggle Menu"
			],
			[
				"proje",
				"Project: Close"
			],
			[
				"togg",
				"View: Toggle Menu"
			],
			[
				"thme",
				"UI: Select Theme"
			],
			[
				"preview",
				"Markdown Preview: Preview in Browser"
			],
			[
				"col",
				"UI: Select Color Scheme"
			],
			[
				"project",
				"Project: Close"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"space",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"toggle men",
				"View: Toggle Menu"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"pac",
				"Package Control: Remove Package"
			],
			[
				"ui",
				"UI: Select Color Scheme"
			],
			[
				"tra",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inde",
				"Indentation: Reindent Lines"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 605.0
	},
	"console":
	{
		"height": 179.0,
		"history":
		[
			"ls",
			"sublime.log_commands(True)",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by",
			" import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": true,
		"status_bar_visible": true
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/home/bladefidz/Codes/algorithm/coursera/baseball/1output.txt",
		"/home/bladefidz/Codes/algorithm/coursera/baseball/BaseballElimination.java",
		"/usr/share/applications/sublime_text.desktop",
		"/home/bladefidz/Codes/algorithm/coursera/baseball/teams4.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/TestFordFulkerson.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FordFulkerson.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FlowEdge.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FlowNetwork.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team4-newyork-fn.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/tinyFN.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team4-philadelphia.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team4-philadelphia-fn.txt",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Queue.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/ST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Edge.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team5-detroit-fn.txt",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/TestBipartiteMatching.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BipartiteX.java",
		"/home/bladefidz/Codes/algorithm/coursera/baseball/teams5.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team5-philadelphia.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/team5-detroit.txt",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/MaxClosure.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BipartiteMatching.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/tinyDance.txt",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/SET.java",
		"/home/bladefidz/Codes/algorithm/coursera/wordnet/WordNet.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java",
		"/home/bladefidz/Codes/algorithm/coursera/kd-tree/NearestNeighborVisualizer.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DijkstraSP.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DirectedEdge.java",
		"/home/bladefidz/Codes/algorithm/coursera/undirected-graph/DepthFirstPaths.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/TestForFulkerson.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DirectedCycle.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/EulerianPath.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/EulerianCycle.java",
		"/home/bladefidz/Codes/algorithm/coursera/directed-graph/HamiltonDAG.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/tinyBaseball.txt",
		"/home/bladefidz/Codes/algorithm/coursera/shortest-path/MonotonicSP.java",
		"/home/bladefidz/Codes/algorithm/coursera/maxflow-mincut/PerfectMatchingKBipartite.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera/maxflow-mincut/tinyDance.txt",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera/maxflow-mincut/PerfectMatchingKBipartite.java",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera/maxflow-mincut/tinyFN.txt",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera/maxflow-mincut/FattestPath.java",
		"/home/bladefidz/hafidzjazuli-drive/Codes/coursera/shortest-path/MonotonicSP.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/MaxPQ.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedGraph.java",
		"/home/bladefidz/Codes/algs4/coursera/maxflow-mincut/tinyFN.txt",
		"/home/bladefidz/Codes/algs4/coursera/shortest-path/MonotonicSP.java",
		"/home/bladefidz/Codes/algs4/coursera/maxflow-mincut/FattestPath.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/KruskalMST.java",
		"/home/bladefidz/Codes/algs4/coursera/shortest-path/SecondShortestPath.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/1output.txt",
		"/home/bladefidz/Codes/algs4/coursera/seam/SeamCarver.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/SCUtility.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/PrintEnergy.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/PrintSeams.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/TestArrayCopy.java",
		"/home/bladefidz/Codes/algs4/coursera/seam/4x6.printseams.txt",
		"/home/bladefidz/Codes/algs4/coursera/seam/ShowEnergy.java",
		"/home/bladefidz/Codes/algs4/coursera/shortest-path/OneSkipableSP.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedDirectedCycle.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java",
		"/home/bladefidz/Codes/algs4/coursera/shortest-path/TestDjikstra.java",
		"/home/bladefidz/Codes/artificial-intelligence/search-algorithm/8-puzzle-game/driver_3.py",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/PrimMST.java",
		"/home/bladefidz/Codes/algs4/coursera/minimum-spanning-tree/MinimumWeightedFeedback.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/UF.java",
		"/home/bladefidz/Codes/algs4/coursera/minimum-spanning-tree/BottleneckMST.java",
		"/home/bladefidz/Codes/algs4/coursera/minimum-spanning-tree/FindEdgeInMST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/CC.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Bag.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/LazyPrimMST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/MinPQ.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BoruvkaMST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Digraph.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Graph.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/Euler.java",
		"/home/bladefidz/Codes/algs4/coursera/minimum-spanning-tree/LazyPrimMST.java",
		"/home/bladefidz/Codes/algs4/coursera/minimum-spanning-tree/tinyEWG.txt",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/hypernyms6InvalidTwoRoots.txt",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/WordNet.java",
		"/home/bladefidz/Codes/algs4/coursera/directed-graph/ReachableVertex.java",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/1output.txt",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/Outcast.java",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/SAP.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BST.java",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/synsets.txt",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/hypernyms.txt",
		"/home/bladefidz/Codes/algs4/coursera/elementary-symbol-table/BSTChecker.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/DepthFirstPaths.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DepthFirstSearch.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DirectedDFS.java",
		"/home/bladefidz/Codes/algs4/coursera/test/TestMutability.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/LinkedStack.java",
		"/home/bladefidz/Codes/algs4/coursera/queue-stack/LinkedStack.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/RedBlackBST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/BinarySearchST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FrequencyCounter.java",
		"/home/bladefidz/Codes/algs4/coursera/kd-tree/PointSET.java",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/digraph2.txt",
		"/home/bladefidz/Codes/algs4/coursera/wordnet/hypernyms11AmbiguousAncestor.txt",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/StdIn.java",
		"/home/bladefidz/Codes/algs4/coursera/directed-graph/ShortestDirectedCycle.java",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/Stack.java",
		"/home/bladefidz/Codes/algs4/coursera/directed-graph/HamiltonDAG.java",
		"/home/bladefidz/Codes/algs4/coursera/puzzle/Solver.java",
		"/home/bladefidz/Codes/algs4/coursera/directed-graph/cyclic-digraph3.txt",
		"/home/bladefidz/Codes/algs4/coursera/priority-queue/Taxicab.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/Tree.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/tower.txt",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/connected5v6e.txt",
		"/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/DepthFirstPaths.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/connected5v7e.txt",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/connected5v8e.txt",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/5v8econnected.txt",
		"/home/bladefidz/Codes/algorithm/README.md",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/IterativeDFS.java",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/tinyG.txt",
		"/home/bladefidz/Codes/algs4/coursera/undirected-graph/tree.txt",
		"/home/bladefidz/Codes/algs4/coursera/queue-stack/Deque.java",
		"/home/bladefidz/Codes/algs4/coursera/hash-table/4Sum.java"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"maxFlow",
			"FAILED",
			"margin",
			"row",
			"j",
			");\n",
			"j",
			"maxFlow",
			"bipartite",
			" 1$",
			"1$",
			" 1",
			"bipartite",
			"bipartite(",
			"bipartite",
			"bipartie",
			"bipar",
			"SET",
			"Direc",
			"edge",
			"Direc",
			"increase",
			"decrea",
			"change",
			"incres",
			"mate(",
			"increase",
			"key",
			"incr",
			"increase",
			"delMax",
			"del",
			"FAILED",
			"failed",
			"energyFrom",
			"energyTo",
			"energy",
			"this.height()",
			"this.width()",
			"this.picture.height()",
			"this.picture.width()",
			"this.picture.width() * this.picture.height()",
			"new",
			"pathTo",
			"relax",
			"s",
			"weight",
			"minWeight",
			"mst.",
			"mst",
			"FLOATING_POINT_EPSILON",
			"degree(",
			"degree",
			"out",
			"outde",
			"188",
			"addE",
			"SAP is imm",
			"outd",
			"nonIsolatedVertex",
			"adj",
			"Euler",
			"this.digraph",
			"FAILED",
			"FAIL",
			"check",
			"assert",
			"NodeList",
			"ancestor",
			"distTo",
			"Queue",
			"HipHopQueue",
			"getFirst",
			"UniqueIntQueue",
			"maxAncestor",
			"walk",
			"indegree",
			"edgeTo",
			"bfsMultiPath",
			"lastSAP",
			"findAncestralPath",
			"UniqueIntQueue(",
			"UniqueIntQueue",
			"get",
			"Queue",
			"nounQA",
			"nounQ",
			"enqueue",
			"parent",
			"garden_truck",
			"38003",
			"nouns",
			"invertedIndex",
			"nouns",
			"nounIds",
			"line",
			"readl",
			"reads",
			"readst",
			"bear",
			"potato,",
			"table,",
			"table",
			"Ancestal",
			"ancestal",
			"wordGraph",
			"ww",
			"get",
			"toFound",
			"vertexCount",
			"isRootedDAG",
			"wordnet",
			"copy",
			"synsets",
			"nouns",
			"38003",
			"38003,",
			"keys",
			"key()",
			"keys()",
			"38003",
			"CycleRoot",
			"cycle",
			"onStack",
			"size",
			" ",
			"numberof",
			"selfl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"FF",
			"segment",
			"length",
			"i",
			"m",
			"",
			"energyTo",
			"energyFrom",
			"this.height",
			"this.width",
			"monotonicTo",
			"minWeightCrossingCut",
			"EulerCycle",
			"D",
			"NodeStack",
			"NodeQueue",
			"HipHopQueue",
			"foundCommonParent",
			"bfs",
			"bfsMultiPath",
			"nounQA",
			"add",
			"invertedIndex",
			"index",
			"Ancestral",
			"ancestral",
			"digraph",
			"w",
			"find",
			"digraph",
			"nouns",
			"synsets",
			"CycleHead",
			"shortestCycle",
			"onCheck",
			"%20",
			"\n\t*",
			"\tpu",
			"\t",
			"\n\t*",
			" *\n\t",
			"board",
			"eq",
			"enqueue",
			"blankJ",
			"blankI",
			"i",
			"\t\t",
			"\\n",
			"highestPoint",
			"Point",
			"r",
			"q",
			"Comparable",
			"slopes",
			"pp",
			"curV",
			"i1",
			"i",
			"i1",
			"istop",
			"typedef struct",
			"VERTEX",
			"\"",
			"vertices",
			"enqueueEdgeAdjList",
			"dequeue",
			"Dequeue",
			"vertex",
			"nodes",
			"Node",
			"Vertex",
			"vertex",
			"vertices",
			"vertex",
			"nodes",
			"vertices",
			"FileLines",
			"bufferSize",
			"freeAddr",
			"allocated",
			"BUFFER_SIZE",
			"vertex",
			"n",
			"vertex",
			"i",
			"}",
			"{",
			"StrMatch",
			"orderS",
			"orderP",
			"order",
			"char *pattern, char *str",
			"m",
			"n",
			"MatchList",
			"MatcheList",
			"foundSmallest",
			"array",
			"isNumericChar",
			"intArray",
			"stack",
			"backwardSearch",
			"forwardSearch",
			"searchBackward",
			"searchForward",
			"inputChar",
			"append",
			"push",
			"'2'",
			"'1'",
			"createNewNode",
			"newNode",
			"newList",
			"power",
			"powerOf",
			"sai",
			"SAI",
			"true",
			"false"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/bladefidz/Codes/algs4/src/main/java/edu/princeton/cs/algs4/FordFulkerson.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10647,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"git_gutter_is_enabled": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Java/Java.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "teams4a.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 98,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"git_gutter_is_enabled": true,
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 138.0
	},
	"pinned_build_system": "",
	"project": "coursera-algorithm.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ford",
				"algs4/src/main/java/edu/princeton/cs/algs4/FordFulkerson.java"
			],
			[
				"flowne",
				"algs4/src/main/java/edu/princeton/cs/algs4/FlowNetwork.java"
			],
			[
				"qu",
				"algs4/src/main/java/edu/princeton/cs/algs4/Queue.java"
			],
			[
				"st.ja",
				"algs4/src/main/java/edu/princeton/cs/algs4/ST.java"
			],
			[
				"flowed",
				"algs4/src/main/java/edu/princeton/cs/algs4/FlowEdge.java"
			],
			[
				"bipartitex",
				"algs4/src/main/java/edu/princeton/cs/algs4/BipartiteX.java"
			],
			[
				"graphge",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"bipa",
				"algs4/src/main/java/edu/princeton/cs/algs4/BipartiteMatching.java"
			],
			[
				"set",
				"algs4/src/main/java/edu/princeton/cs/algs4/SET.java"
			],
			[
				"edeg",
				"algs4/src/main/java/edu/princeton/cs/algs4/Edge.java"
			],
			[
				"flown",
				"algs4/src/main/java/edu/princeton/cs/algs4/FlowNetwork.java"
			],
			[
				"st.a",
				"algs4/src/main/java/edu/princeton/cs/algs4/ST.java"
			],
			[
				"for",
				"algs4/src/main/java/edu/princeton/cs/algs4/FordFulkerson.java"
			],
			[
				"edge",
				"algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java"
			],
			[
				"graph",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"dji",
				"algs4/src/main/java/edu/princeton/cs/algs4/DijkstraSP.java"
			],
			[
				"flo",
				"algs4/src/main/java/edu/princeton/cs/algs4/FlowEdge.java"
			],
			[
				"flow",
				"algs4/src/main/java/edu/princeton/cs/algs4/FlowNetwork.java"
			],
			[
				"bipart",
				"algs4/src/main/java/edu/princeton/cs/algs4/BipartiteX.java"
			],
			[
				"graphg",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"dire",
				"algs4/src/main/java/edu/princeton/cs/algs4/DirectedEdge.java"
			],
			[
				"graphgen",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"cyc",
				"algs4/src/main/java/edu/princeton/cs/algs4/DirectedCycle.java"
			],
			[
				"eul",
				"algs4/src/main/java/edu/princeton/cs/algs4/EulerianPath.java"
			],
			[
				"hami",
				"algorithm/coursera/directed-graph/HamiltonDAG.java"
			],
			[
				"index",
				"algs4/src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java"
			],
			[
				"indexm",
				"algs4/src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java"
			],
			[
				"dep",
				"algorithm/coursera/undirected-graph/DepthFirstPaths.java"
			],
			[
				"djik",
				"algs4/src/main/java/edu/princeton/cs/algs4/DijkstraSP.java"
			],
			[
				"edgewe",
				"algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java"
			],
			[
				"gr",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"breat",
				"algs4/src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java"
			],
			[
				"gra",
				"algs4/src/main/java/edu/princeton/cs/algs4/GraphGenerator.java"
			],
			[
				"max",
				"algs4/src/main/java/edu/princeton/cs/algs4/MaxPQ.java"
			],
			[
				"djiks",
				"algs4/src/main/java/edu/princeton/cs/algs4/DijkstraSP.java"
			],
			[
				"weight",
				"algs4/src/main/java/edu/princeton/cs/algs4/EdgeWeightedGraph.java"
			],
			[
				"brea",
				"algs4/src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"directededge",
				"algs4/src/main/java/edu/princeton/cs/algs4/DirectedEdge.java"
			],
			[
				"krusk",
				"src/main/java/edu/princeton/cs/algs4/KruskalMST.java"
			],
			[
				"dij",
				"src/main/java/edu/princeton/cs/algs4/DijkstraSP.java"
			],
			[
				"wei",
				"src/main/java/edu/princeton/cs/algs4/EdgeWeightedDigraph.java"
			],
			[
				"direc",
				"src/main/java/edu/princeton/cs/algs4/DirectedEdge.java"
			],
			[
				"inde",
				"src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java"
			],
			[
				"bell",
				"src/main/java/edu/princeton/cs/algs4/BellmanFordSP.java"
			],
			[
				"uf",
				"src/main/java/edu/princeton/cs/algs4/UF.java"
			],
			[
				"cc",
				"src/main/java/edu/princeton/cs/algs4/CC.java"
			],
			[
				"ba",
				"src/main/java/edu/princeton/cs/algs4/Bag.java"
			],
			[
				"prim",
				"src/main/java/edu/princeton/cs/algs4/PrimMST.java"
			],
			[
				"krus",
				"src/main/java/edu/princeton/cs/algs4/KruskalMST.java"
			],
			[
				"ind",
				"src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java"
			],
			[
				"min",
				"src/main/java/edu/princeton/cs/algs4/MinPQ.java"
			],
			[
				"ed",
				"src/main/java/edu/princeton/cs/algs4/Edge.java"
			],
			[
				"laz",
				"src/main/java/edu/princeton/cs/algs4/LazyPrimMST.java"
			],
			[
				"dig",
				"src/main/java/edu/princeton/cs/algs4/Digraph.java"
			],
			[
				"digr",
				"src/main/java/edu/princeton/cs/algs4/Digraph.java"
			],
			[
				"mst",
				"src/main/java/edu/princeton/cs/algs4/BoruvkaMST.java"
			],
			[
				"edgew",
				"src/main/java/edu/princeton/cs/algs4/EdgeWeightedGraph.java"
			],
			[
				"indexp",
				"src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java"
			],
			[
				"digra",
				"src/main/java/edu/princeton/cs/algs4/Digraph.java"
			],
			[
				"directed",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"euler",
				"src/main/java/edu/princeton/cs/algs4/EulerianCycle.java"
			],
			[
				"word",
				"coursera/wordnet/WordNet.java"
			],
			[
				"bst",
				"src/main/java/edu/princeton/cs/algs4/BST.java"
			],
			[
				"direct",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"directedpath",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"bfs",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"path",
				"coursera/undirected-graph/DepthFirstPaths.java"
			],
			[
				"dfs",
				"src/main/java/edu/princeton/cs/algs4/DepthFirstSearch.java"
			],
			[
				"linked",
				"src/main/java/edu/princeton/cs/algs4/LinkedStack.java"
			],
			[
				"red",
				"src/main/java/edu/princeton/cs/algs4/RedBlackBST.java"
			],
			[
				"redbl",
				"src/main/java/edu/princeton/cs/algs4/RedBlackBST.java"
			],
			[
				"que",
				"src/main/java/edu/princeton/cs/algs4/Queue.java"
			],
			[
				"queu",
				"src/main/java/edu/princeton/cs/algs4/Queue.java"
			],
			[
				"binar",
				"src/main/java/edu/princeton/cs/algs4/BinarySearchST.java"
			],
			[
				"hash",
				"src/main/java/edu/princeton/cs/algs4/LinearProbingHashST.java"
			],
			[
				"queue",
				"src/main/java/edu/princeton/cs/algs4/FrequencyCounter.java"
			],
			[
				"st",
				"src/main/java/edu/princeton/cs/algs4/ST.java"
			],
			[
				"hyp",
				"coursera/wordnet/hypernyms.txt"
			],
			[
				"stdi",
				"src/main/java/edu/princeton/cs/algs4/StdIn.java"
			],
			[
				"stdin",
				"src/main/java/edu/princeton/cs/algs4/StdIn.java"
			],
			[
				"inverted",
				"src/main/java/edu/princeton/cs/algs4/RedBlackBST.java"
			],
			[
				"syn",
				"coursera/wordnet/synsets.txt"
			],
			[
				"st.",
				"src/main/java/edu/princeton/cs/algs4/ST.java"
			],
			[
				"breadthfirstdirectedpaths",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstDirectedPaths.java"
			],
			[
				"redbla",
				"src/main/java/edu/princeton/cs/algs4/RedBlackBST.java"
			],
			[
				"stack",
				"src/main/java/edu/princeton/cs/algs4/Stack.java"
			],
			[
				"sap",
				"coursera/wordnet/SAP.java"
			],
			[
				"digraph.ja",
				"src/main/java/edu/princeton/cs/algs4/Digraph.java"
			],
			[
				"priori",
				"coursera/priority-queue/Taxicab.java"
			],
			[
				"stac",
				"src/main/java/edu/princeton/cs/algs4/Stack.java"
			],
			[
				"depth",
				"src/main/java/edu/princeton/cs/algs4/DepthFirstSearch.java"
			],
			[
				"bre",
				"src/main/java/edu/princeton/cs/algs4/BreadthFirstPaths.java"
			],
			[
				"depat",
				"src/main/java/edu/princeton/cs/algs4/DepthFirstPaths.java"
			],
			[
				"deq",
				"coursera/queue-stack/Deque.java"
			],
			[
				"enqu",
				"src/main/java/edu/princeton/cs/algs4/Queue.java"
			],
			[
				"bag",
				"src/main/java/edu/princeton/cs/algs4/Bag.java"
			],
			[
				"point2d",
				"src/main/java/edu/princeton/cs/algs4/Point2D.java"
			],
			[
				"point",
				"src/main/java/edu/princeton/cs/algs4/Point2D.java"
			],
			[
				"rec",
				"src/main/java/edu/princeton/cs/algs4/RectHV.java"
			],
			[
				"stdd",
				"src/main/java/edu/princeton/cs/algs4/StdDraw.java"
			],
			[
				"std",
				"src/main/java/edu/princeton/cs/algs4/StdDraw.java"
			],
			[
				"rect",
				"src/main/java/edu/princeton/cs/algs4/RectHV.java"
			],
			[
				"stddr",
				"src/main/java/edu/princeton/cs/algs4/StdDraw.java"
			],
			[
				"point2",
				"src/main/java/edu/princeton/cs/algs4/Point2D.java"
			],
			[
				"pon",
				"coursera/elementary-sort/Point2D.java"
			],
			[
				"minpq",
				"src/main/java/edu/princeton/cs/algs4/MinPQ.java"
			],
			[
				"enqueue",
				"src/main/java/edu/princeton/cs/algs4/Queue.java"
			],
			[
				"minp",
				"src/main/java/edu/princeton/cs/algs4/MinPQ.java"
			],
			[
				"stack.ja",
				"src/main/java/edu/princeton/cs/algs4/Stack.java"
			],
			[
				"heap",
				"src/main/java/edu/princeton/cs/algs4/Heap.java"
			],
			[
				"binaryh",
				"src/main/java/edu/princeton/cs/algs4/BinarySearch.java"
			],
			[
				"merge",
				"coursera/merge_sort/Merge.java"
			],
			[
				"input8",
				"coursera/collinear/input8.txt"
			],
			[
				"point8",
				"coursera/percolation/input8.txt"
			],
			[
				"fast",
				"coursera/merge_sort/FastMerge.java"
			],
			[
				"mer",
				"coursera/merge_sort/Merge.java"
			],
			[
				"horizon",
				"coursera/collinear/horizontal5.txt"
			],
			[
				"poin",
				"data_structure/pointer.c"
			],
			[
				"dumm",
				"graph_algorithm/dummy_path.txt"
			],
			[
				"io_",
				"io/io_file.c"
			],
			[
				"benc",
				"sort/benchmark_sort.c"
			],
			[
				"pointer",
				"data_structure/pointer.c"
			],
			[
				"test.c",
				"graph_algorithm/searching/test.c"
			],
			[
				"web.p",
				"routes/web.php"
			],
			[
				"route",
				"vendor/symfony/routing/Route.php"
			],
			[
				"footer",
				"resources/views/layouts/footer.blade.php"
			],
			[
				"projectcon",
				"app/Http/Controllers/ProjectController.php"
			],
			[
				"show",
				"resources/views/project/show.blade.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 217.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 2
	}
}
